openapi: 3.1.0
info:
  version: 1.0.0
  title: API Documentation


servers:
  - url: " "

tags:

  - name: Digital Goods (Multibiller)
    description: |
      ## Purpose of This Document - Digital Goods
      ---
      This document elaborates upon the specifications and process flows that are used by aggregator and its partners to make a service payment point.

      <br>
      <br>

      ### Scope 
      This document covers for each product:
      * Normal and Abnormal Transaction Flows
      * Message Formats together with their respective samples

      The transaction flows in each product mainly revolve around the following functions:
      * Inquiry
      * Payment
      * Advice or Reversal (subject to the product)

      <br>
      <br>

      ### Target Audience 
      This document is targeted for use by merchants/partners/clients acting as Collecting Agents.

      <br>
      <br>

      ## Flow - Digital Goods
      ---
      <br>
      <br>

      ### Normal Transaction

      ![Normal Transaction](../asset/normaltransaction.png)

      <br>
      <br>

      #### Explanation:

      <u> Inquiry: </u>

      To make an inquiry, CA sends an Inquiry request message to aggregator, who in turn submits the message to Biller upon successfully authenticating its signature. Biller then responds with requested data (customer name total amount, response code 00) to aggregator, who in turn passes the data to CA, if the inquiry is successful. If failed, CA receives a response code other than 00.

      <br>
      <br>

      <u>Payment:</u>                      

      To make a payment, CA then sends a Payment request message (which includes requested data from the earlier Inquiry message) to aggregator, who in turn submits the message to Biller upon successfully authenticating its signature. Biller then responds with acknowledgement data (receipt code, response code 00) to aggregator, who in turn passes the data to CA, if the payment is successful. If failed, CA receives a response code other than 00.

      <br>
      <br>

      ### Abnormal Transaction

      ![Abnormal Transaction](../asset/normaltransaction.png)

      <br>
      <br>

      #### Explanation:

      <u>Advice:</u>

      Advice requests are used to check if a payment is successful, in which case the customer receives a payment
      reference number (receiptcode).

        1. Auto Advice
          
            CA automatically sends an Advice request message to aggregator if:

            a. there is no payment response after 30 seconds (in other words, timeout); or

            b. CA receives RC (Response Code) 76.

            Aggregator will in turn submit the message to Biller upon successfully authenticating its signature. Biller then responds with acknowledgement data (receipt code, response code 00) to aggregator, who in turn passes the data to CA, if the payment is successful. If failed, CA receives a response code other than 00.

        2. Manual Advice
          
            Advice requests can be sent in a manual way to check if a payment is successful.

      <br>
      <br>

      <u>Reversal:</u>

        Reversal requests are used to cancel a payment transaction. CA automatically sends a Reversal request message to aggregator if:

        1. there is no payment response after 30 seconds (in other words, timeout); or

        2. CA receives RC (Response Code) 76.

        Aggregator will in turn submit the message to Biller upon successfully authenticating its signature. Biller then responds with acknowledgement data (such as Response Code 00, Reversal Reference Code) to aggregator, who in turn passes the data to CA, if the reversal is successful. If failed, CA receives a response code other than 00. The Reversal requests are sent up to a maximum of 3 times if a previous Reversal request still has not received a response message within a certain agreed timeframe (in this case, 30s).
      
      <br>
      <br>

      ## Flow - Game Products
      ---
      <br>
      <br>
        Step by step :
        
        1. Hit get products API first to get product list

        2. Hit get products detail API to get product details 

        3. Hit get products stock API to get product stock information
      <br>
      <br>

      ## Interface Requirements - Digital Goods
      ---
      |Interface Requirements|                                                                                 |
      |----------------------|---------------------------------------------------------------------------------|
      |Protocol              |HTTP / HTTPS (Recommended)                                                       |
      |Data Exchange Type    |JSON                                                                             |
      |Method                |POST                                                                             |
      |Inquiry URL           |https://xxx.xxx.xxx:xx/PPOBCa/webresources/inquiry (IP to be provided later)     |
      |Payment URL           |https://xxx.xxx.xxx:xx/PPOBCa/webresources/payment (IP to be provided later)     |
      |Advice URL            |https://xxx.xxx.xxx:xx/PPOBCa/webresources/advice (IP to be provided later)      |
      |Reversal URL          |https://xxx.xxx.xxx:xx/PPOBCa/webresources/reversal (IP to be provided later)    |
      |Port                  |To be provided later                                                             |
      |PartnerID             |To be provided later                                                             |
      |Password              |To be provided later                                                             |
      
  - name: Virtual Account
    description: |
      ## Purpose of This Document - VA
      ---
      This document elaborates upon the specifications and process flows that are used by PT. Inovasi Daya Solusi and its partners to make a service create virtual account.

      <br>
      <br>

      ### Scope 
      This document covers:
      * Creating VA Flow
      * Create and Notify Transaction Flows
      * Message Formats together with their respective samples

      The transaction flows in each product mainly revolve around the following functions:
      * Inquiry
      * Payment
      * Advice or Reversal (subject to the product)

      <br>
      <br>

      ### Target Audience
      This document is prepared for merchant IT Development team.
      
      <br>
      <br>

      ## Flow - VA
      ---
      <br>
      <br>

      ![Flow]()

      <br>
      <br>

      ### Notes:
      - If VA already Expired Biller or customers who want to make a transaction should request the VA Again
      - Updating VA does not mean Update VA number
      - VA that already created will be Automatically expired after 24 hours
      - VA that already paid cannot be used again

      <br>
      <br>

      ## Interface Requirements - VA
      ---
      |Interface Requirements|                                                                                 |
      |----------------------|---------------------------------------------------------------------------------|
      |Protocol              |HTTP / HTTPS (Recommended)                                                       |
      |Data Exchange Type    |JSON                                                                             |
      |Method                |POST                                                                             |
      |URL                   |https://xxx.xxx.xxx:xx/IDS/webresources/(IP and Port to be provided later)       |
      |Port                  |To be provided later                                                             |
      |PartnerID             |To be provided later                                                             |
      |Password              |To be provided later                                                             |
  
  - name: Ototrans  
    description: |
      ## Purpose of This Document - Ototrans
      ---
      This document elborates upon the specification and process flows that are used by PT Inovasi Daya Solusi and its partner to make a service payment point.

      <br>
      <br>

      ### Scope

      This document covers for each product:
      * Normal and abnormal transaction flows
      * Message formats together with their respective samples

      The transaction flows in each product mainly revolve around the following function;
      * Inquiry
      * Payment
      * Advice

      <br>
      <br>

      ### Target Audience 

      This document is targeted for use by merchants.

      <br>
      <br>

      ## Flow - Ototrans
      ---
      ![Flow]()

  - name: Setorku 
    description: |
      ## Purpose of This Document - Setorku
      ---
      This document elaborates upon the specifications and process flows that are used by PT. IDS and its partners to make a service deposit point.

      <br>
      <br>

      ### Scope

      This document covers:
      * Create and Notify Transaction Flows
      * Message Formats together with their respective samples

      <br>
      <br>

      ### Target Audience 
      
      This document is prepared for Merchant's IT Development Team.

      <br>
      <br>

      ## Flow - Setorku
      ---

      <br>
      <br>

      ### Work Flow
      ![Work Flow]()

      <u>Details:</u>
      1. DKH Assignment process can be integrated with mobile collection of merchants.
      2. Setor Code can only be generated after Collector close the DKH.

      <br>
      <br>

      ### Service Point Flow
       ![Service Point Flow]()

      <br>
      <br>

      ## Interface Requirements - Setorku
      ---

      |Interface Requirements|                                                                                 |
      |----------------------|---------------------------------------------------------------------------------|
      |Protocol              |HTTP / HTTPS (Recommended)                                                       |
      |Data Exchange Type    |JSON                                                                             |
      |Method                |POST                                                                             |
      |URL                   |https://xxx.xxx.xxx:xx/IDS/webresources/setorDTH (IP and Port to be provided later)|
      |Port                  |To be provided later                                                             |
      |PartnerID             |To be provided later                                                             |
      |Password              |To be provided later                                                             |

paths:

# Digital Goods ==========================================

  /Inquiry (Digital Goods): 
    $ref: paths/Digital Goods/inquiryDigitalGoods.yaml

  /Payment (Digital Goods):
    $ref: paths/Digital Goods/paymentDigitalGoods.yaml

  /Advice (Digital Goods):
    $ref: paths/Digital Goods/adviceDigitalGoods.yaml

  /Reversal (Digital Goods):
    $ref: paths/Digital Goods/reversalDigitalGoods.yaml

  /Get Products: 
    $ref: paths/Digital Goods/getProducts.yaml

  /Get Products Detail Unipin: 
    $ref: paths/Digital Goods/getProductsDetail.yaml

  /Get Products Stocks: 
    $ref: paths/Digital Goods/getProductStock.yaml

  /Additional Notes: 
    $ref: paths/Digital Goods/additionalNotes.yaml
  
  /Products:
    $ref: paths/Digital Goods/products.yaml

  /Signature (Digital Goods):
    $ref: paths/Digital Goods/signatureDigitalGoods.yaml

  /List of Response Codes(Digital Goods):
    $ref: paths/Digital Goods/listOfResponseCodesDigitalGoods.yaml

# Virtual Account ==========================================

  /Create VA:
    $ref: paths/Virtual Account/createVA.yaml

  /Call Back VA Aggregator:
    $ref: paths/Virtual Account/callBackVaAggregator.yaml

  /Update VA:
    $ref: paths/Virtual Account/updateVa.yaml

  /Signature (VA):
    $ref: paths/Virtual Account/signatureVa.yaml

  /List of Bank code:
    $ref: paths/Virtual Account/ListOfBank.yaml

  /VA Aggregator status:
    $ref: paths/Virtual Account/vaAggregatorStatus.yaml

  /List of Response Codes (VA):
    $ref: paths/Virtual Account/listOfResponseCodesVa.yaml

# Ototrans ==========================================

  /Inquiry (Ototrans):
    $ref: paths/Ototrans/inquiryOtotrans.yaml

  /Payment (Ototrans):
    $ref: paths/Ototrans/paymentOtotrans.yaml

  /Advice (Ototrans):
    $ref: paths/Ototrans/adviceOtotrans.yaml

  /Account Inquiry:
    $ref: paths/Ototrans/accountInquiry.yaml

  /Signature (Ototrans):
    $ref: paths/Ototrans/signatureOtotrans.yaml

  /List of Response Codes (Ototrans):
    $ref: paths/Ototrans/listOfResponseCodesOtotrans.yaml

  # Setorku ==========================================

  /IDS's Create Store code:
    $ref: paths/Setorku/createStoreCode.yaml

  /Notif Payment: 
    $ref: paths/Setorku/notifPayment.yaml

  /Notif Reversal:
    $ref: paths/Setorku/notifReversal.yaml

  /Signature (Setorku):
    $ref: paths/Setorku/signatureSetorku.yaml

  /List of Response Codes (Setorku):
    $ref: paths/Setorku/listOfResponseCodesSetorku.yaml

  /Recon File:
    $ref: paths/Setorku/reconFile.yaml

